{"pages":[{"title":"about","text":"Hello :)","link":"/about/index.html"}],"posts":[{"title":"[공공데이터 분석] 코로나 감염 현황 분석 - 인증키 발급","text":"보건복지부에서는코로나19 감염_현황를 신속 투명하게 공개하기 위해 오픈 API를 기반으로 발생 상황에 대한 정보를 제공하고 있습니다. 해당 오픈 API를 사용하기 위해서는 공공데이터 포털에서 인증키를 발급받아야 합니다. 인증키를 발급받기 위해서는 공공데이터 포털의 계정이 필요하므로 보유하고 있는 계정이 없는 경우 회원가입을 먼저 진행합니다. API 인증키 발급공공데이터 포털에서 로그인을 한 후 코로나 19 감염 현황을 검색하면 관련된 데이터의 목록이 조회가 됩니다. 스크롤을 아래로 내려 오픈 API 항목에 있는 보건복지부_코로나19 감염_현황을 클릭합니다. 상세 화면에서 활용 신청 버튼을 클릭합니다. 신청에 필요한 정보를 기재합니다. 발급받은 인증키의 경우 정상적으로 인증이 되기까지 최대 2시간의 시간이 필요할 수 있습니다. 또한 발급된 인증키의 경우 외부에 유출되지 않도록 관리가 필요합니다. 활용신청 상세 기능정보에서 제공하는 미리 보기 기능을 통해 다음과 같이 필요한 요청 변수와 해당 요청의 결과를 조회할 수 있습니다. 만약 SERVICE_KEY_IS_NOT_REGISTERED_ERROR와 같은 결과가 나오는 경우 최대 2시간의 시간이 필요할 수 있습니다.","link":"/2020/12/31/DATA-COVID-19-01/"},{"title":"[공공데이터 분석] 코로나 감염 현황 분석 - 데이터 수집","text":"코로나 감염 현황 정보를 받아오기 위해 Python을 이용하여 데이터를 수집 합니다. 만약 인증키가 없는 경우 인증키 발급이 필요합니다. Google Colaboratory본 과정은 Google Colaboratory 환경을 이용합니다. Google Colaboratory(이하, Colab)은 브라우저에서 Python Code를 작성하고 실행할 수 있는 개발 환경입니다. Colab은 무료로 CPU/GPU/TPU 환경을 사용 할 수 있으며 코드 공유가 쉽다는 장점을 가지고 있습니다. 브라우저에서 Google Colaboratory을 검색하거나 주소창에 https://colab.research.google.com 를 입력합니다. 하단의 새 노트를 클릭하면 Jupyter Notebook 환경과 유사한 Python Code를 작성하고 실행할 수 있는 개발 환경을 확인 할 수 있습니다. 좌측 상단의 제목인 Untitled0.ipynb을 클릭하면 파일명을 변경 할 수 있습니다. 모듈 설치데이터 수집을 위해선 서버에 데이터 요청을 해야합니다. Python 환경에서 HTTP Requests를 하기 위해 Requests 모듈과 XML 형식의 응답 결과를 JSON 구조로 만들기 위한 xmltodict 모듈과 데이터프레임을 생성하고 데이터 가공에 특화된 Pandas 모듈을 설치합니다. 1pip install requests xmltodict pandas 만약, Colab 환경을 사용하는 경우 xmltodict 모듈만 설치하면 됩니다. 필요 모듈 설치가 완료되면 아래의 코드를 실행하여 설치한 모듈을 import합니다. 12345# 필요한 모듈을 import 합니다.import json # Python에서 JSON을 사용하기 위한 모듈import requests # HTTP Requests를 위한 모듈import xmltodict # XML 형식을 JSON으로 변환하기 위한 모듈import pandas as pd # DataFrame을 생성하고 가공하기 위한 모듈 URL 작성HTTP Requests를 위해서는 URL을 작성해야합니다. 보건복지부 코로나 19 감염 현황의 경우 기본 서비스 URL은 http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson 이며 서비스키(ServiceKey)를 필수로 포함해야합니다. 이외 필요 정보는 다음과 같습니다. 요청 변수(Request Parameter) 항목명(국문) 항목명(영문) 항목크기 항목구분 샘플데이터 항목설명 서비스키 ServiceKey 4 필수 - 공공데이터포털에서 받은 인증키 페이지 번호 pageNo 4 옵션 1 페이지번호 한 페이지 결과 수 numOfRows 4 옵션 10 한 페이지 결과 수 데이터 생성일 시작범위 startCreateDt 30 옵션 20200310 검색할 생성일 범위의 시작 데이터 생성일 종료범위 endCreateDt 30 옵션 20200315 검색할 생성일 범위의 종료 응답 결과(Response Element) 항목명(국문) 항목명(영문) 항목크기 항목구분 샘플데이터 항목설명 결과코드 resultCode 2 필수 00 결과코드 결과메시지 resultMsg 50 필수 OK 결과메시지 한 페이지 결과 수 numOfRows 4 필수 10 한 페이지 결과 수 페이지 번호 pageNo 4 필수 1 페이지번호 전체 결과 수 totalCount 4 필수 3 전체 결과 수 게시글번호(감염현황 고유값) SEQ 30 필수 74 게시글번호(감염현황 고유값) 기준일 STATE_DT 30 필수 20200315 기준일 기준시간 STATE_TIME 30 필수 00:00 기준시간 확진자 수 DECIDE_CNT 15 필수 8162 확진자 수 격리해제 수 CLEAR_CNT 15 필수 834 격리해제 수 검사진행 수 EXAM_CNT 15 필수 16272 검사진행 수 사망자 수 DEATH_CNT 15 필수 75 사망자 수 치료중 환자 수 CARE_CNT 15 필수 7253 치료중 환자 수 결과 음성 수 RESUTL_NEG_CNT 15 필수 243778 결과 음성 수 누적 검사 수 ACC_EXAM_CNT 15 필수 268212 누적 검사 수 누적 검사 완료 수 ACC_EXAM_COMP_CNT 15 필수 251940 누적 검사 완료 수 누적 환진률 ACC_DEF_RATE 30 필수 3.2396602365 누적 환진률 등록일시분초 CREATE_DT 30 필수 2020-03-15 10:01:22.000 등록일시분초 수정일시분초 UPDATE_DT 30 필수 null 수정일시분초 따라서, http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson?ServiceKey=발급받은서비스키와 같이 접속하면 데이터를 요청 할 수 있습니다. 데이터 요청발급 받은 인증키를 API_KEY 부분에 입력 후 코드를 실행하면 정상적으로 데이터를 받아온 경우 &lt;Response [200]&gt;와 같은 결과가 나옵니다. 만약 200이 아닌 경우 요청 및 응답을 받아오는 과정에서 에러가 발생한 경우이며 [] 안에 있는 숫자가 에러 코드를 의미합니다. 12345678910# Requests를 위한 URL을 생성합니다.# Requests를 위한 URL을 생성합니다.url = 'http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson?'url += 'serviceKey=API_KEY'url += '&amp;startCreateDt=20200101'url += '&amp;endCreateDt=20201231'res = requests.get(url)res 응답 데이터를 보기 위해서는 응답 변수의 text 속성을 조회하면 확인 할 수 있습니다. 12# 응답 결과의 내용을 조회합니다.res.text 응답 데이터 변환응답 결과는 XML 형식으로 데이터가 기록되어 있고 원하는 데이터를 추출하기에 조금 어려움이 있습니다. 이를 쉽게 접근하기 위해 dict 형식으로 변환합니다. 12345678# 응답 결과의 내용을 Python Dict 형태로 변환합니다.res_json = xmltodict.parse(res.text) # 문자열을 XML을 JSON 형식으로 변환합니다.res_dict = json.dumps(res_json) # 변환된 JSON 형식을 Dictionary 문자열로 변환합니다.data = json.loads(res_dict) # Dictionary 문자열을 파이썬의 Dictionary 형식으로 변환합니다.data = json.loads(json.dumps(xmltodict.parse(res.text))) # 1줄로 작성된 변환 과정 사전 접근법을 이용하여 필요한 데이터에 접근합니다. 12# 필요한 데이터만 선택합니다.data['response']['body']['items'] 선택된 데이터만 데이터 프레임 형태로 변환합니다. 123# 선택된 데이터를 데이터 프레임으로 변환합니다.df = pd.DataFrame(data['response']['body']['items']['item'])df 변환된 파일을 파일로 저장합니다. 12# seq 컬럼의 값을 기준으로 데이터 프레임을 오름차순 정렬 후 파일로 저장합니다.df.sort_values('seq').to_excel('코로나 19 감염 현황.xlsx', index=False) Colab 환경의 경우 좌측에 있는 폴더 모양 아이콘을 클릭하여 파일로 저장된 코로나 19 감염 현황 데이터를 다운로드 받습니다. 다운로드 받은 파일을 열어보면 다음과 같은 결과를 확인 할 수 있습니다. 본 과정에서 사용한 코드는 아래의 링크를 클릭하면 확인 할 수 있습니다. [공공데이터 분석] 코로나 감염 현황 분석 - 데이터 수집","link":"/2021/01/01/DATA-COVID-19-02/"},{"title":"[PANDAS] Series &amp; DataFrame 생성","text":"Pandas는 Python 프로그래밍 언어를 기반으로 구축된 빠르고 강력하며 유연하고 사용하기 쉬운 오픈 소스 데이터 분석 및 조작 도구입니다. Pandas에서는 Series와 DataFrame 객체를 이용하여 데이터를 분석 및 조작 할 수 있습니다. 본 글에서는 Series와 DataFrame을 생성하는 방법에 대해 알아봅니다. 먼저 Pandas와 Numpy 모듈을 import 합니다. 12import numpy as npimport pandas as pd SeriesSeries는 모든 데이터 유형(int, float, str, object 등)을 저장할 수 있는 1차원 데이터 구조 입니다. 1차원 Numpy Array와 동일하게 위치(정수)를 기반으로 Indexing과 Slicing을 사용할 수 있다는 점이 동일하지만 인덱스 문자로 지정한 경우 이름(문자열)을 기반으로 Indexing과 Slicing을 할 수 있습니다. Series는 1차원 자료 구조를 기반으로 Series 객체를 만들어 주는 생성자 함수를 이용하여 생성 할 수 있습니다. a Python dict, list, tuple an ndarray a scalar value (like 5) 인덱스를 설정하지 않는 경우 기본적으로 위치(정수)가 옵니다. 기존에 사용하는 1차원 자료 구조와는 다르게 데이터가 열을 기준으로 나열 됩니다. 123series = pd.Series([1, 2, 3, 4, 5])series 인덱스를 문자로 지정하고 싶은 경우 index 매개변수에 데이터와 동일한 개수를 가지는 1차원 자료 구조를 대입합니다. 123series = pd.Series([1, 2, 3, 4, 5], index=['A', 'B', 'C', 'D', 'E'])series DataFrameDataFrame은 Pandas에서 가장 많이 사용되는 구조로 2차원 데이터 구조로 행과 열이 존재하는 테이블 구조 입니다. 많이 사용하는 엑셀의 한 Sheet 또는 SQL의 테이블이라고도 볼 수 있습니다. 또한 DataFrame은 여러개의 Series가 Dict로 묶여 있다고도 볼 수 있습니다. DataFrame은 2차원 자료 구조를 기반으로 DataFrame 객체를 만들어 주는 생성자 함수를 이용하여 생성 할 수 있습니다. Dict of 1D ndarrays, lists, dicts, or Series 2-D numpy.ndarray Structured or record ndarray A Series Another DataFrame 행 인덱스와 열 인덱스(컬럼명)을 설정하지 않는 경우 기본적으로 위치(정수)가 옵니다. 1234dataframe = pd.DataFrame( [[1, 2, 3], [4, 5, 6], [7, 8, 9]])dataframe 행 인덱스를 문자로 지정하고 싶은 경우 index 매개 변수를 열 인덱스를 문자로 지정하고 싶은 경우 columns 매개 변수에 동일한 개수를 가지는 1차원 자료 구조를 대입합니다. 1234dataframe = pd.DataFrame( [[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['A','B','C'])dataframe 1234dataframe = pd.DataFrame( [[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['A','B','C'], index=['a', 'b', 'c'])dataframe 또한 DataFrame은 Dict를 기반으로도 생성 할 수 있습니다. 이때 Dict의 키가 가지고 있는 Value의 개수는 동일 해야하며 Dict의 키가 열 인덱스(컬럼명)으로 지정됩니다. 123456dataframe = pd.DataFrame( { 'A' : [1, 2, 3], 'B' : [4, 5, 6], 'C' : [7, 8, 9]})dataframe","link":"/2021/01/02/PANDAS-CREATE/"},{"title":"[환경설정] Apple Silicon 개발 환경 설정","text":"현재 사용 중인 M1 MacMini와 M1 MacBook Pro에서 다음과 같은 초기 작업을 진행합니다. Oh-My-Zsh 설정 Brew 설치 (Rosetta2 이용) Tensorflow 설치 Zsh 설정12345sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting .zshrc1plugins=(git zsh-autosuggestions zsh-syntax-highlighting) Brew 설치1arch -x86_64 /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot; .zshrc1alias ibrew=&quot;arch -x86_64 brew&quot; Tensorflow 설치1/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/apple/tensorflow_macos/master/scripts/download_and_install.sh)&quot;","link":"/2020/12/29/SETTING-APPLE-M1/"},{"title":"[PANDAS] Series &amp; DataFrame Basic","text":"Pandas는 Python 프로그래밍 언어를 기반으로 구축된 빠르고 강력하며 유연하고 사용하기 쉬운 오픈 소스 데이터 분석 및 조작 도구입니다. Pandas에서는 Series와 DataFrame 객체를 이용하여 데이터를 분석 및 조작 할 수 있습니다. 본 글에서는 Series와 DataFrame에 대한 기본 사용 방법에 대해 알아봅니다. 데이터 접근 방법파이썬에서는 기본적으로 이름뒤에 []가 온다면 데이터를 선택 한다는 의미를 가지고 있습니다. 이러한 형식은 Python str, list, tuple, dict Numpy Array와 같은 데이터 형식에서도 동일한 의미를 가집니다. 데이터를 선택하는 과정을 인덱싱(Indexing)이라고 하며 만약 가지고 올 값이 여러개인 경우 슬라이싱(Slicing)을 이용할 수 있습니다. Sequence 자료형의 경우 위치(숫자)를 dict 자료형의 경우 이름(문자열)을 이용 합니다. SeriesSeries의 경우 Python list, tuple, Numpy Array에서 사용하는것과 동일하게 대괄호([행 인덱스])를 통해 개별 데이터에 접근 할 수 있습니다. 123series = pd.Series([1, 2, 3, 4, 5])series[0], series[2], series[-1], series[1:2] Series의 경우 문자열 인덱스를 가질 수 있기 때문에 이름(문자열)을 통해서도 개별 데이터에 접근 할 수 있습니다. 123series = pd.Series([1, 2, 3], index=['a', 'b', 'c'])series['a'], series['a':'c'], series[2] 이때 위치(숫자)도 사용 가능 하며 Slicing의 경우 위치는 콜론 뒤에 데이터를 포함하지 않지만 문자열의 경우 포함한다는 점이 차이점입니다. DataFrameDataFrame도 동일하게 인덱싱을 이용 할 수 있지만 차이점이 존재합니다. Numpy Array의 경우 [행 인덱스, 열 인덱스]로 2차원 배열에서 데이터를 선택 가능하지만 DataFrame에서는 해당 방법을 사용시 에러가 발생 할 수 있습니다. 물론 loc, iloc, iat, at과 같은 인덱서를 이용하면 Numpy Array와 동일(유사)하게 동작합니다. DataFrame은 대괄호를 2개를 사용하며 [열 인덱스][행 인덱스]를 통해 개별 값에 접근 할 수 있습니다. DataFrame은 여러개의 시리즈가 컬럼 명을 Key로 가지는 Dict 형식이라고 생각 해볼 수 있습니다. 즉 첫번째 대괄호를 사용하여 1개의 Series를 선택하고 선택된 Series를 기반으로 다시 행을 접근한다고 생각하면 됩니다. 1234dataframe = pd.DataFrame( [[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['A','B','C'])dataframe['A'] 만약 여러개 또는 특정 범위의 컬럼을 선택하기 위해서 인덱싱을 한다면 생각한것과 다른 결과가 나오거나 아예 데이터가 나오지 않을 수 있습니다. 이러한 이유는 대괄호 안에 슬라이싱을 적용할때는 행 인덱스를 사용하기 때문입니다. 즉, 아래의 결과가 아무런 결과도 나오지 않는 이유는 행 인덱스는 [0, 1, 2]인데 ‘A’부터 ‘C’까지 데이터를 선택하라고 했기 때문에 결과가 나오지 않는 것을 확인 할 수 있습니다. 1234dataframe = pd.DataFrame( [[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['A','B','C'])dataframe['A':'C'] 1234dataframe = pd.DataFrame( [[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['A','B','C'])dataframe[:2] 이러한 문제로 인해서 Pandas에서 데이터를 선택하는 과정은 loc, iloc, at, iat과 같은 인덱서를 이용하는 것을 추천합니다. 공통 기본 속성Series와 DataFrame 모두 index, values, columns(DataFrame만 존재), dtypes, shape, T, loc, iloc, at, iat 과 같은 속성이 존재합니다. valuesvalues 속성은 Series 또는 DataFrame의 값을 Numpy Array 형식으로 반환 합니다. 12series = pd.Series([1, 2, 3, 4, 5])series.values indexindex 속성은 Series 또는 DataFrame의 행 인덱스를 반환 합니다. 추후 특정한 행 데이터 또는 조건에 성립하는 행 데이터를 삭제하기 위해선 인덱스 정보가 필요한데 이때 index 속성을 이용합니다. 12series = pd.Series([1, 2, 3, 4, 5])series.index columnscolumns 속성은 DataFrame에서만 사용할 수 있으며 열 인덱스(컬럼명)을 반환 합니다. 1234dataframe = pd.DataFrame( [[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['A','B','C'])dataframe.columns 앞서 이야기 한 3가지(index, columns, values) 속성이 중요한 이유는 데이터를 조회하는 기능과 동시에 수정도 지원하기 때문입니다. 즉, 컬럼명을 변경하고 싶은 경우 columns 속성에 새로운 컬럼명 리스트(동일한 데이터 개수를 가진)를 대입하는 경우 컬럼명이 변경 됩니다. index 도 동일하며 index의 경우 행 인덱스를 변경 됩니다. 123456dataframe = pd.DataFrame( [[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['A','B','C'])dataframe.columns = ['X1', 'X2', 'X3']dataframe.index = ['a', 'b', 'c']dataframe dtypes데이터 유형을 조회할 수 있는 속성으로 DataFrame의 경우 각 열별 데이터 타입의 결과값이 반환됩니다. series의 경우 dtype 속성으로도 조회 가능 합니다. (데이터 프레임은 불가) 1234dataframe = pd.DataFrame( [[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['A','B','C'])dataframe.dtypes shape데이터의 형태를 조회할 수 있는 속성으로 Series의 경우 행 데이터 수가, DataFrame의 경우 행, 열 데이터 수가 튜플 형식으로 출력됩니다. 1234dataframe = pd.DataFrame( [[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['A','B','C'])dataframe.shape # (행의 수, 열의 수) TTranspose의 줄임말이며 행과 열이 변경된 결과를 반환합니다. 1234dataframe = pd.DataFrame( [[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['A','B','C'])dataframe.T loc, iloc, at, iat데이터에 접근할때 사용하는 인덱서(Indexer)로 Numpy Array에서 사용한 Index과 Slicing을 동일하게 진행 할 수 있습니다. 해당 부분은 데이터를 선택하는 포스트에서 따로 언급하도록 하겠습니다.","link":"/2021/01/03/PANDAS-BASIC/"}],"tags":[{"name":"Setting","slug":"Setting","link":"/tags/Setting/"},{"name":"오픈API","slug":"오픈API","link":"/tags/%EC%98%A4%ED%94%88API/"},{"name":"COVID-19","slug":"COVID-19","link":"/tags/COVID-19/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Crawling","slug":"Crawling","link":"/tags/Crawling/"},{"name":"Pandas","slug":"Pandas","link":"/tags/Pandas/"},{"name":"Series","slug":"Series","link":"/tags/Series/"},{"name":"DataFrame","slug":"DataFrame","link":"/tags/DataFrame/"},{"name":"Apple Silicon","slug":"Apple-Silicon","link":"/tags/Apple-Silicon/"}],"categories":[{"name":"환경 설정","slug":"환경-설정","link":"/categories/%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95/"},{"name":"데이터 분석","slug":"데이터-분석","link":"/categories/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"코로나 19 감염 현황 분석","slug":"데이터-분석/코로나-19-감염-현황-분석","link":"/categories/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D/%EC%BD%94%EB%A1%9C%EB%82%98-19-%EA%B0%90%EC%97%BC-%ED%98%84%ED%99%A9-%EB%B6%84%EC%84%9D/"},{"name":"Pandas","slug":"Python/Pandas","link":"/categories/Python/Pandas/"},{"name":"Apple Silicon","slug":"환경-설정/Apple-Silicon","link":"/categories/%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95/Apple-Silicon/"}]}