{"pages":[{"title":"about","text":"Hello :)","link":"/about/index.html"}],"posts":[{"title":"[공공데이터 분석] 코로나 감염 현황 분석 - 인증키 발급","text":"보건복지부에서는코로나19 감염_현황를 신속 투명하게 공개하기 위해 오픈 API를 기반으로 발생 상황에 대한 정보를 제공하고 있습니다. 해당 오픈 API를 사용하기 위해서는 공공데이터 포털에서 인증키를 발급받아야 합니다. 인증키를 발급받기 위해서는 공공데이터 포털의 계정이 필요하므로 보유하고 있는 계정이 없는 경우 회원가입을 먼저 진행합니다. API 인증키 발급공공데이터 포털에서 로그인을 한 후 코로나 19 감염 현황을 검색하면 관련된 데이터의 목록이 조회가 됩니다. 스크롤을 아래로 내려 오픈 API 항목에 있는 보건복지부_코로나19 감염_현황을 클릭합니다. 상세 화면에서 활용 신청 버튼을 클릭합니다. 신청에 필요한 정보를 기재합니다. 발급받은 인증키의 경우 정상적으로 인증이 되기까지 최대 2시간의 시간이 필요할 수 있습니다. 또한 발급된 인증키의 경우 외부에 유출되지 않도록 관리가 필요합니다. 활용신청 상세 기능정보에서 제공하는 미리 보기 기능을 통해 다음과 같이 필요한 요청 변수와 해당 요청의 결과를 조회할 수 있습니다. 만약 SERVICE_KEY_IS_NOT_REGISTERED_ERROR와 같은 결과가 나오는 경우 최대 2시간의 시간이 필요할 수 있습니다.","link":"/2020/12/31/DATA-COVID-19-01/"},{"title":"[환경설정] Apple Silicon 개발 환경 설정","text":"현재 사용 중인 M1 MacMini와 M1 MacBook Pro에서 다음과 같은 초기 작업을 진행합니다. Oh-My-Zsh 설정 Brew 설치 (Rosetta2 이용) Tensorflow 설치 Zsh 설정12345sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting .zshrc1plugins=(git zsh-autosuggestions zsh-syntax-highlighting) Brew 설치1arch -x86_64 /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot; .zshrc1alias ibrew=&quot;arch -x86_64 brew&quot; Tensorflow 설치1/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/apple/tensorflow_macos/master/scripts/download_and_install.sh)&quot;","link":"/2020/12/29/SETTING-APPLE-M1/"},{"title":"[공공데이터 분석] 코로나 감염 현황 분석 - 데이터 수집","text":"코로나 감염 현황 정보를 받아오기 위해 Python을 이용하여 데이터를 수집 합니다. 만약 인증키가 없는 경우 인증키 발급이 필요합니다. Google Colaboratory본 과정은 Google Colaboratory 환경을 이용합니다. Google Colaboratory(이하, Colab)은 브라우저에서 Python Code를 작성하고 실행할 수 있는 개발 환경입니다. Colab은 무료로 CPU/GPU/TPU 환경을 사용 할 수 있으며 코드 공유가 쉽다는 장점을 가지고 있습니다. 브라우저에서 Google Colaboratory을 검색하거나 주소창에 https://colab.research.google.com 를 입력합니다. 하단의 새 노트를 클릭하면 Jupyter Notebook 환경과 유사한 Python Code를 작성하고 실행할 수 있는 개발 환경을 확인 할 수 있습니다. 좌측 상단의 제목인 Untitled0.ipynb을 클릭하면 파일명을 변경 할 수 있습니다. 모듈 설치데이터 수집을 위해선 서버에 데이터 요청을 해야합니다. Python 환경에서 HTTP Requests를 하기 위해 Requests 모듈과 XML 형식의 응답 결과를 JSON 구조로 만들기 위한 xmltodict 모듈과 데이터프레임을 생성하고 데이터 가공에 특화된 Pandas 모듈을 설치합니다. 1pip install requests xmltodict pandas 만약, Colab 환경을 사용하는 경우 xmltodict 모듈만 설치하면 됩니다. 필요 모듈 설치가 완료되면 아래의 코드를 실행하여 설치한 모듈을 import합니다. 12345# 필요한 모듈을 import 합니다.import json # Python에서 JSON을 사용하기 위한 모듈import requests # HTTP Requests를 위한 모듈import xmltodict # XML 형식을 JSON으로 변환하기 위한 모듈import pandas as pd # DataFrame을 생성하고 가공하기 위한 모듈 URL 작성HTTP Requests를 위해서는 URL을 작성해야합니다. 보건복지부 코로나 19 감염 현황의 경우 기본 서비스 URL은 http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson 이며 서비스키(ServiceKey)를 필수로 포함해야합니다. 이외 필요 정보는 다음과 같습니다. 요청 변수(Request Parameter) 항목명(국문) 항목명(영문) 항목크기 항목구분 샘플데이터 항목설명 서비스키 ServiceKey 4 필수 - 공공데이터포털에서 받은 인증키 페이지 번호 pageNo 4 옵션 1 페이지번호 한 페이지 결과 수 numOfRows 4 옵션 10 한 페이지 결과 수 데이터 생성일 시작범위 startCreateDt 30 옵션 20200310 검색할 생성일 범위의 시작 데이터 생성일 종료범위 endCreateDt 30 옵션 20200315 검색할 생성일 범위의 종료 응답 결과(Response Element) 항목명(국문) 항목명(영문) 항목크기 항목구분 샘플데이터 항목설명 결과코드 resultCode 2 필수 00 결과코드 결과메시지 resultMsg 50 필수 OK 결과메시지 한 페이지 결과 수 numOfRows 4 필수 10 한 페이지 결과 수 페이지 번호 pageNo 4 필수 1 페이지번호 전체 결과 수 totalCount 4 필수 3 전체 결과 수 게시글번호(감염현황 고유값) SEQ 30 필수 74 게시글번호(감염현황 고유값) 기준일 STATE_DT 30 필수 20200315 기준일 기준시간 STATE_TIME 30 필수 00:00 기준시간 확진자 수 DECIDE_CNT 15 필수 8162 확진자 수 격리해제 수 CLEAR_CNT 15 필수 834 격리해제 수 검사진행 수 EXAM_CNT 15 필수 16272 검사진행 수 사망자 수 DEATH_CNT 15 필수 75 사망자 수 치료중 환자 수 CARE_CNT 15 필수 7253 치료중 환자 수 결과 음성 수 RESUTL_NEG_CNT 15 필수 243778 결과 음성 수 누적 검사 수 ACC_EXAM_CNT 15 필수 268212 누적 검사 수 누적 검사 완료 수 ACC_EXAM_COMP_CNT 15 필수 251940 누적 검사 완료 수 누적 환진률 ACC_DEF_RATE 30 필수 3.2396602365 누적 환진률 등록일시분초 CREATE_DT 30 필수 2020-03-15 10:01:22.000 등록일시분초 수정일시분초 UPDATE_DT 30 필수 null 수정일시분초 따라서, http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson?ServiceKey=발급받은서비스키와 같이 접속하면 데이터를 요청 할 수 있습니다. 데이터 요청발급 받은 인증키를 API_KEY 부분에 입력 후 코드를 실행하면 정상적으로 데이터를 받아온 경우 &lt;Response [200]&gt;와 같은 결과가 나옵니다. 만약 200이 아닌 경우 요청 및 응답을 받아오는 과정에서 에러가 발생한 경우이며 [] 안에 있는 숫자가 에러 코드를 의미합니다. 12345678910# Requests를 위한 URL을 생성합니다.# Requests를 위한 URL을 생성합니다.url = 'http://openapi.data.go.kr/openapi/service/rest/Covid19/getCovid19InfStateJson?'url += 'serviceKey=API_KEY'url += '&amp;startCreateDt=20200101'url += '&amp;endCreateDt=20201231'res = requests.get(url)res 응답 데이터를 보기 위해서는 응답 변수의 text 속성을 조회하면 확인 할 수 있습니다. 12# 응답 결과의 내용을 조회합니다.res.text 응답 데이터 변환응답 결과는 XML 형식으로 데이터가 기록되어 있고 원하는 데이터를 추출하기에 조금 어려움이 있습니다. 이를 쉽게 접근하기 위해 dict 형식으로 변환합니다. 12345678# 응답 결과의 내용을 Python Dict 형태로 변환합니다.res_json = xmltodict.parse(res.text) # 문자열을 XML을 JSON 형식으로 변환합니다.res_dict = json.dumps(res_json) # 변환된 JSON 형식을 Dictionary 문자열로 변환합니다.data = json.loads(res_dict) # Dictionary 문자열을 파이썬의 Dictionary 형식으로 변환합니다.data = json.loads(json.dumps(xmltodict.parse(res.text))) # 1줄로 작성된 변환 과정 사전 접근법을 이용하여 필요한 데이터에 접근합니다. 12# 필요한 데이터만 선택합니다.data['response']['body']['items'] 선택된 데이터만 데이터 프레임 형태로 변환합니다. 123# 선택된 데이터를 데이터 프레임으로 변환합니다.df = pd.DataFrame(data['response']['body']['items']['item'])df 변환된 파일을 파일로 저장합니다. 12# seq 컬럼의 값을 기준으로 데이터 프레임을 오름차순 정렬 후 파일로 저장합니다.df.sort_values('seq').to_excel('코로나 19 감염 현황.xlsx', index=False) Colab 환경의 경우 좌측에 있는 폴더 모양 아이콘을 클릭하여 파일로 저장된 코로나 19 감염 현황 데이터를 다운로드 받습니다. 다운로드 받은 파일을 열어보면 다음과 같은 결과를 확인 할 수 있습니다. 본 과정에서 사용한 코드는 아래의 링크를 클릭하면 확인 할 수 있습니다. [공공데이터 분석] 코로나 감염 현황 분석 - 데이터 수집","link":"/2021/01/01/DATA-COVID-19-02/"},{"title":"SETTING-HEXO-GITHUB","text":"","link":"/2021/01/02/SETTING-HEXO-GITHUB/"}],"tags":[{"name":"오픈API","slug":"오픈API","link":"/tags/%EC%98%A4%ED%94%88API/"},{"name":"COVID-19","slug":"COVID-19","link":"/tags/COVID-19/"},{"name":"Apple Silicon","slug":"Apple-Silicon","link":"/tags/Apple-Silicon/"},{"name":"Setting","slug":"Setting","link":"/tags/Setting/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Crawling","slug":"Crawling","link":"/tags/Crawling/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Github Page","slug":"Github-Page","link":"/tags/Github-Page/"}],"categories":[{"name":"데이터 분석","slug":"데이터-분석","link":"/categories/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D/"},{"name":"환경 설정","slug":"환경-설정","link":"/categories/%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95/"},{"name":"코로나 19 감염 현황 분석","slug":"데이터-분석/코로나-19-감염-현황-분석","link":"/categories/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D/%EC%BD%94%EB%A1%9C%EB%82%98-19-%EA%B0%90%EC%97%BC-%ED%98%84%ED%99%A9-%EB%B6%84%EC%84%9D/"},{"name":"Apple Silicon","slug":"환경-설정/Apple-Silicon","link":"/categories/%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95/Apple-Silicon/"},{"name":"GitHub Page (Hexo)","slug":"환경-설정/GitHub-Page-Hexo","link":"/categories/%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95/GitHub-Page-Hexo/"}]}